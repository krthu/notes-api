# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: ktpersonal
# "service" is the name of this project. This will also be added to your AWS resource names.
service: exam-aws-api

provider:
  name: aws
  runtime: nodejs20.x
  region: eu-north-1
  environment: 
    JWT_SECRET: ${ssm:/for-class/aws/ticket-app/jwt-secret}
    USER_TABLE: examUsers-db
    NOTES_TABLE: examNotes-db
  role: ${ssm:/for-class/iam/role}

package:
  individually: true

build:
  esbuild: 
    minify: true

resources:
  Resources:
    examUsers:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: examUsers-db
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
      
    examNotes:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: examNotes-db
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
  

functions:
  signUp:
    handler: functions/signUp/index.handler
    events:
      - httpApi:
          path: '/api/user/signup'
          method: POST

  signIn:
    handler: functions/signIn/index.handler
    events:
      - httpApi:
          path: '/api/user/login'
          method: POST

  postNote:
    handler: functions/postNote/index.handler
    events:
      - httpApi:
          path: '/api/notes'
          method: POST

  getNotes:
    handler: functions/getNotes/index.handler
    events:
      - httpApi:
          path: '/api/notes'
          method: GET

  putNote:
    handler: functions/putNote/index.handler
    events:
      - httpApi:
          path: '/api/notes/{noteId}'
          method: PUT

  deleteNote:
    handler: functions/deleteNote/index.handler
    events:
      - httpApi:
          path: '/api/notes/{noteId}'
          method: Delete

  getDeletedNotes:
    handler: functions/getDeletedNotes/index.handler
    events:
      - httpApi:
          path: '/api/deleted-notes'
          method: GET

  permanentlyDeleteNote:
    handler: functions/permanentlyDeleteNote/index.handler
    events:
      - httpApi:
          path: '/api/deleted-notes/{noteId}'
          method: DELETE

  restoreNote:
    handler: functions/restoreNote/index.handler
    events:
      - httpApi:
          path: '/api/restore-note/{noteId}'
          method: PUT